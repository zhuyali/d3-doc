{"./":{"url":"./","title":"Introduction","keywords":"","body":"D3-DOC Document for D3 "},"d3-selection.html":{"url":"d3-selection.html","title":"d3-selection","keywords":"","body":"选择元素 d3.selection | Function 入参: 无 描述: 选择根元素，即 document.documentElement 返回值: Selection 注: 该函数可用于检测一个对象是否是一个 Selection 实例: object instanceof d3.selection，或者用于在 d3.selection 的原型上进行扩展 d3.selectAll | Function 入参: selector，有两种形式： 传入 CSS 选择器，类型为字符串。d3 支持所有的 CSS 选择器(类选择器，标签选择器，ID 选择器，属性选择器，通配选择器以及组合选择器) 传入节点，这可以与 jQuery 等第三方库合作使用。同时，这在你已经有一个节点的引用时是十分有用的，比如//将所有链接的字体颜色改为红色 d3.selectAll(document.links).style(\"color\", \"red\"); 描述: 选择选择器匹配的所有元素，如果没有匹配，或者入参为 undefined 和 null，则返回一个空的 selection 返回值: Selection d3.select | Function 入参: selector，有两种形式： 传入 CSS 选择器，类型为字符串。d3 支持所有的 CSS 选择器(类选择器，标签选择器，ID 选择器，属性选择器，通配选择器以及组合选择器) 传入节点，这可以与 jQuery 等第三方库合作使用。同时，这在你已经有一个节点的引用时是十分有用的，比如//将所有被点击的段落的字体颜色改为红色 d3.selectAll(\"p\").on(\"click\", function() { d3.select(this).style(\"color\", \"red\"); }); 描述: 选择选择器匹配的第一个元素，如果没有，则返回一个空的 selection 返回值: Selection selection.selectAll | Function 入参: selector，有两种形式： CSS 选择器 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数必须具有返回值，返回值可以是一个元素数组(或伪数组)，如果不存在匹配元素，则返回空数组 描述: 在所有已经被选择的元素下，选择选择器匹配的所有子元素。如果没有元素匹配选择器，则该对应的父元素分组为空的 NodeList；如果入参为 undefined 和 null，那么返回的 selection 下的每一个分组(分组的意义详见注解)都为空的 NodeList；如果当前元素有数据，匹配子元素并不继承该数据，而是需要通过 selection.data 进行进一步操作 返回值: Selection 注：返回结果会根据所有已经被选择的元素进行分组，每个被选择元素为一组。若某个被选择元素下存在匹配选择器的子节点，则该分组具有包含该节点的节点集；否则，若某个被选择元素下不存在任何匹配选择器的子节点，则该分组为空的 NodeList selection.select | Function 入参: selector，有两种形式： CSS 选择器 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数必须具有返回值，返回值可以是一个元素，如果不存在匹配元素，则返回 null 描述: 在所有已经被选择的元素下，选择选择器匹配的第一个子元素。如果没有元素匹配选择器，则该对应的父元素分组为null；如果入参为 undefined 和 null，那么返回的 selection 下的每一个分组(分组的意义详见注解)都为 null；如果当前元素有数据，那么所有的匹配子元素都会继承该数据 返回值: Selection 注：返回结果会根据所有已经被选择的元素进行分组，每个被选择元素为一组。若某个被选择元素下存在匹配选择器的子节点，则该分组包含该节点；否则，若某个被选择元素下不存在任何匹配选择器的子节点，则该分组为 null selection.filter | Function 入参: selector， 有两种形式： CSS 选择器，用于筛选当前选择集中匹配选择器的元素创建选择集 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。若该函数返回 true，则代表当前元素被保留；否则，代表当前元素被丢弃 描述: 对当前选择集中包含的节点进行筛选 返回值: Selection selection.merge | Function 入参: other selection 描述: 将当前选择集与其他选择集进行合并，返回的选择集与当前选择集具有相同的 parents 和相同数量的分组。对于当前选择集中缺失的分组，会从其他选择集中选择填充入对应的元素。该方法通常用于合并 enter 和 update 选择集 返回值: Selection 注: 如果当前选择集和其他选择集在相同的索引位置上都存在非空元素，那么会保留当前选择集在该索引位置上的元素，忽略其他选择集在该索引位置上的元素 d3.matcher | Function 入参: selector，CSS 选择器 描述: 对于给定的入参 selector，返回一个函数 - 若 this 元素与该选择器匹配，则返回 true；否则，返回 false。该方法通常用于在 selection.filter 函数中使用，比如 var div = selection.filter(\"div\"); 等价于 var div = selection.filter(d3.matcher(\"div\")); 返回值: Function d3.selector | Function 入参: selector，CSS 选择器 描述: 对于给定的入参 selector，返回一个函数 - 该函数返回 this 元素的第一个与选择器匹配的后代。该方法通常用于在 selection.select 函数中使用，比如 var div = selection.select(\"div\"); 等价于 var div = selection.select(d3.selector(\"div\")); 返回值: Function d3.selectorAll | Function 入参: selector，CSS 选择器 描述: 对于给定的入参 selector，返回一个函数 - 该函数返回 this 元素的所有与选择器匹配的后代。该方法通常用于在 selection.selectAll 函数中使用，比如 var div = selection.selectAll(\"div\"); 等价于 var div = selection.selectAll(d3.selectAll(\"div\")); 返回值: Function d3.window | Function 入参: node，node 可能的取值有三种 node 是节点，则返回所属的文档关联的 window 对象 node 是文档，则返回该文档关联的 window 对象 node 是 window 对象，则直接返回 node 描述: 返回 node 所属的 window 对象 返回值: window d3.style | Function 入参: (node, name)，其中 node 为节点，name 是字符串 描述: 返回特定 node 节点，特定名称的 CSS 属性值。如果该属性是内联样式，则直接返回属性值；否则，返回属性的计算值(computed value) 返回值: String 修改元素 selection.attr | Function 入参: (name[, value])，其中 value 有两种形式 value 是一个常量，那么所有被选择的元素的对应属性值都会被赋值为相同的 value 值 value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值会作为当前元素的属性值，如果函数返回 null，则意味着移除该属性 描述: 如果没有指定value，则会返回选择集中第一个非空元素的对应属性值。如果指定了 value ，那么会将所有已被选择的元素的对应属性值设置为 value 并且返回当前选择集 返回值: 如果未指定 value，则返回字符串；否则，返回 Selection 注: 这里的 name 属性可能带有命名空间前缀，例如 xlink:href 就代表 XLink 命名空间中的 href 属性 selection.classed | Function 入参: (name[, value])，其中 value 有两种形式 value 是一个常量，如果 value 值等价于 true，那么所有已经被选择的元素都会添加类 name；否则，如果 value 值等价于 false，那么所有已经被选择的元素都会移除类 name value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值决定是当前元素是移除类还是添加类，如果函数返回为 true，则添加；否则，则移除 描述: 如果没有指定 value，则返回选择集中第一个非空元素的 class 是否包含有特定 name，如果包含，则返回 true；否则返回 false。如果指定了 value，那么会添加或移除所有已被选择元素的对应的 class 返回值: 如果未指定 value，则返回布尔值；否则，返回 Selection 注: 这里的 name 是一个以空格作为分隔符的字符串，可以包含多个 class name，比如 selection.classed(\"foo bar\", true); selection.style | Function 入参: (name[, value[, priority]])，其中 value 有两种形式 value 是一个常量，那么所有被选择的元素的对应 name 的 CSS 样式都会被赋值为相同的 value 值 value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值会作为当前元素特定 name 的 CSS 样式值，如果函数返回为 null，则意味着移除该 CSS 样式 描述: 如果没有指定 value，则返回选择集中第一个非空元素的特定 name 的样式值。如果该样式是内联样式，则直接返回属性值；否则，返回属性的计算值(computed value)。如果指定了 value，那么会给所有已选择元素的特定 name 的 CSS 样式设置 value 值 返回值: 如果未指定 value，则返回字符串；否则，返回 Selection 注: priority 是可选的，它的取值可以为 null 或者字符串 important selection.property | Function 入参: (name[, value])，其中 value 有两种形式 value 是一个常量，那么所有被选择的元素的对应属性值都会被赋值为相同的 value 值 value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值会作为当前元素的属性值，如果函数返回 null，则意味着移除该属性 描述: 如果没有指定 value，则会返回选择集中第一个非空元素的对应属性值。如果指定了 value ，那么会将所有已被选择的元素的对应属性值设置为 value 并且返回当前选择集 返回值: 如果未指定 value，则返回字符串；否则，返回 Selection 注: 一些 HTML 元素具有特殊的属性，这些属性使用 attribute 或 style 都无法寻址，例如多选框的 checked 属性，此时可以考虑使用 property 来进行操作 selection.text | Function 入参: [value]，有两种形式 value 是一个常量，那么所有被选择的元素的 textContent 都会被赋值为相同的 value 值 value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值会作为当前元素的 textContent，如果函数返回 null，则将 textContent 置空 描述: 如果没有指定 value，则会返回选择集中第一个非空元素的 textContent。如果指定了 value ，那么会将所有已被选择的元素的 textContent 设置为 value 并且返回当前选择集 返回值: 如果未指定 value，则返回字符串；否则，返回 Selection selection.html | Function 入参: [value]，有两种形式 value 是一个常量，那么所有被选择的元素的 innerHTML 都会被赋值为相同的 value 值 value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值会作为当前元素的 innerHTML，如果函数返回 null，则将 innerHTML 置空 描述: 如果没有指定 value，则会返回选择集中第一个非空元素的 innerHTML。如果指定了 value ，那么会将所有已被选择的元素的 innerHTML 设置为 value 并且返回当前选择集 返回值: 如果未指定 value，则返回字符串；否则，返回 Selection selection.append | Function 入参: type，有两种形式 标签名字符串，比如 div，circle 等 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数返回一个需要被添加的元素，这个元素可以是一个新的元素，也可以是已经存在的元素 描述: 向所有已经被选择的元素添加子元素或兄弟元素，新增的元素还将继承当前选择集的数据。如果当前选择集是 enter 选择集，则 append 操作的行为是添加兄弟元素；如果当前选择集是非 enter 选择集，则 append 操作的行为是添加子元素 返回值: 包含被添加元素的 Selection 注: 这里的 type 可能带有命名空间前缀，例如 svg:text 就代表 SVG 命名空间中的 text 标签 selection.insert | Function 入参: (type[, before]) 其中 type 有两种形式 标签名字符串，比如 div，circle 等 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数返回一个需要被插入的元素，这个元素可以是一个新的元素，也可以是已经存在的元素 其中 before 有两种形式 CSS 选择器，类型为字符串，比如 :first-child，div 等 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数返回一个当前选择集中的子节点，用于在该子节点前进行元素的插入 描述: 向所有已经被选择的元素添加子元素。如果指定了 before 参数，那么被添加的子元素会位于 before 指定的元素前面；如果没有指定 before 参数，则 before 默认为 null 返回值: 包含被添加元素的 Selection 注: 这里的 type 可能带有命名空间前缀，例如 svg:text 就代表 SVG 命名空间中的 text 标签 selection.remove | Function 入参: 无 描述: 从文档中移除所有已经被选择的元素 返回值: 被移除的 Selection selection.sort | Function 入参: [compare 函数]，默认是 ascending 函数。compare 函数有两个参数(数据参数 a 和 b)，并且返回任一正的、负的或零值。如果返回为正，则带有数据 a 的元素在带有数据 b 的元素之后；反之，如果返回为负，则 a 在 b 之前；如果返回为零，a 和 b 的顺序随机 描述: 对当前选择集进行排序，并且返回，由于排序是依照数据来进行的，因而 sort 只能对带有数据的元素进行排序 返回值: 经过排序的 Selection 注：需要注意的是，这种排序方式并不保证是稳定排序，但它与浏览器内置的数据排序方法具有相同的行为 selection.order | Function 入参: 无 描述: 对于所有已经被选择的元素，按照选择集中的顺序重新插入到文档中 返回值: 与原始选择集相同的 Selection selection.raise | Function 入参: 无 描述: 对于所有已经被选择的元素，重新插入到对应的父元素，每次插入时都作为父元素的最后一个子元素，相当于 selection.each(function(){ this.parentNode.appendChild(this); }); 返回值: 与重新插入后的元素顺序相同的 Selection selection.lower | Function 入参: 无 描述: 对于所有已经被选择的元素，重新插入到对应的父元素，每次插入时都作为父元素的第一个子元素，相当于 selection.each(function(){ this.parentNode.insertBefore(this,this.parentNode.firstChild); }); 返回值: 与重新插入后的元素顺序相同的 Selection d3.creator | Function 入参: name，标签名字符串，比如 div，circle 等 描述: 对于给定的 name，返回一个函数，该函数的返回值是一个根据 name 创建好的元素。该方法通常用于在 selection.append 和 selection.insert 函数中使用，比如 selection.append(\"div\"); 等价于 selection.append(d3.creator(\"div\")); 返回值: Function selection.data | Function 入参: [data[, key]] 其中 data 有两种形式 数组，可以包含任意类型的数据 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数必须返回一个数组 其中 key 是一个函数: function (d, i) {} d 代表当前数据，i 代表当前索引。默认情况下，data 数组中的第一个数据元素会与第一个被选择的元素绑定，第二个数据元素会与第二个被选择的元素绑定，以此类推。key 方法的存在打破了这种规律，指定了数据元素和 DOM 元素的绑定关系。在不指定 key 函数时，数据元素和元素默认按照索引进行对应，当指定 key 函数后，索引根据 key 函数的返回值而定，即 key 函数会影响节点的索引，当索引改变时，不会自动触发排序，如果需要进行排序，需要手动调用 sort 或 order 函数。key 函数在过程中会被调用两次：一次是由选择集中的元素发起调用，此时 this 是真实的 DOM 节点；一次是 data 数组，此时的 this 是 data 数组。这两次调用返回的数据会进行比较，具有相同返回值的一个元素和一个数据元素会进行数据绑定，然后在最终返回的选择集中加入该元素，该元素在最终选择集中的位置根据其索引的顺序而定。以下是一个使用 key 函数的例子 var data = [ {name: \"Locke\", number: 4}, {name: \"Reyes\", number: 8}, {name: \"Ford\", number: 15}, {name: \"Jarrah\", number: 16}, {name: \"Shephard\", number: 31}, {name: \"Kwon\", number: 34} ]; d3.selectAll(\"div\") //如果之前已经绑定过数据，则 d 是存在的，以 d.name 做索引；否则，以 this.id 做索引 .data(data, function(d) { return d ? d.name : this.id; }) .text(function(d) { return d.number; }); 描述: 给所有已经被选择的元素绑定数据，返回一个 update 集：成功绑定数据的元素集。同时，由于数据元素和元素个数不一定一致，所以在返回的选择集上还会有 enter 和 exit 操作，详见 selection.enter 和 selection.exit。数据成功绑定后，会存储在 data 属性中。如果没有指定 data，则返回一个数组，数组中依次为当前选择集中的元素绑定的数据 返回值: 成功绑定数据的 Selection，并且带有 enter 和 exit 操作 selection.enter | Function 入参: 无 描述: 在 selection.data 操作后调用该方法。当数据元素个数大于元素个数时，调用该方法会返回缺失的元素集，所以通常调用该方法的目的就是为了创建缺失的元素，比如根据数组创建 div 元素 var div = d3.select(\"body\") .selectAll(\"div\") .data([4, 8, 15, 16, 23, 42]) .enter().append(\"div\") .text(function(d) { return d; }); 假设 body 最初是空的，运行上述代码后，结果如下 4 8 15 16 23 42 返回值: 缺失的 Selection selection.exit | Function 入参: 无 描述: 在 selection.data 操作后调用该方法。当数据元素个数小于元素个数时，调用该方法会返回多余的元素集，所以通常调用该方法的目的就是为了删除缺失的元素，比如根据数组删除多余的 div 元素 前提条件：已经存在包含数据 4, 8, 15, 16, 23, 42 的 div 元素 对 div 重新绑定数据： div = div.data([1, 2, 4, 8, 16, 32], function(d) { return d; }); 这里使用了 key 方法，选择出 [1, 2, 4, 8, 16, 32] 和 [4, 8, 15, 16, 23, 42] 的交集元素，即带有数据 4, 8, 16 的元素加入 update 集 之前的元素不存在 [1, 2, 32]，则作为 enter 集： div.enter().append(\"div\").text(function(d) { return d; }); 之前的 [15, 23, 42] 没有出现在新的数据中，则作为 exit 集： div.exit().remove(); 经过上述一系列代码的运行，结果如下 1 2 4 8 16 32 返回值: 多余的 Selection selection.datum | Function 入参: [value]，有两种形式 value 是一个变量，所有已经被选择的元素都会绑定该 value 数据 value 是一个函数，形式为 function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。此时，函数的返回值会与当前元素进行数据绑定，如果返回 null，则表示删除当前元素所绑定的数据 描述: 如果没有指定 value，则会返回选择集中第一个非空元素绑定的数据。如果指定了 value ，那么会给所有已被选择的元素进行数据绑定 返回值: 进行完数据绑定的 Selection，即在原始 selection 的基础上变化了 data 属性(可能是添加，减少或修改了 data 属性) 注：该方法与 selection.data 完全不同，相较于 selection.data 来说，该方法不关心数据元素和 DOM 元素之间的关系，而只关注于数据绑定 事件处理 selection.on | Function 入参: (typenames[, listener[, capture]]) 其中 typenames 是一个字符串。它的表现形式主要有两种 事件类型，例如 click，mouseover 或 submit 等，支持的事件类型可以参考 DOM event type 事件类型.事件名称，其中事件类型同上，事件名称用来标识该事件，它们中间使用'.'间隔，该形式通常用于给相同类型的事件增加多个不同的监听器 同时，如果要给多个事件注册相同的监听器，则可以将不同的 typename 通过空格分隔来实现，比如input change 或 click.foo click.bar 其中 listener 是一个函数: function (d, i, nodes) {} d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。当在已被选择的元素上触发指定事件后，对应的 listener 会被调用，如果想在 listener 中访问当前事件，通过 d3.event 来进行访问。当在相同元素上注册多个事件监听时，如果该元素上的 typename 已经存在，那么多次注册会覆盖掉原先的监听器。如果想要移除监听器，则传入 listener 为 null 即可：如果要移除特定事件名称的监听器，则指定 typename 为特定的事件名称，listener 为 null 即可；如果要移除所有不带事件名称的 typename 上的监听器，则指定 typename 为 . 即可 其中 capture 是一个布尔值，默认是 false capture 标识符指定事件的捕获方式。当为 false 时，事件从内到外冒泡捕获；反正，从外到内捕获 描述: 向所有已被选择的元素添加或移除事件监听器。如果没有指定 listener，则返回选择集中第一个非空元素对应于当前 typename 的监听器；否则，给对应的 typename 增加事件监听器 返回值: 如果未指定 listener，则返回 Function；否则，返回 Selection selection.dispatch | Function 入参: (type[, parameters]) 其中 type 是一个事件类型字符串，例如 click，mouseover 或 submit 等，支持的事件类型可以参考 DOM event type 其中 parameters 可以指定事件的一些属性，它的表现形式有两种 对象: 可以指定事件的 bubbles, cancelable, detail 属性 bubbles true 代表该事件可以冒泡 cancelable true 与执行 event.preventDefault 效果相同 detail 自定义数据 函数: function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。这个函数必须返回对象类型 描述: 触发所有当前已被选择元素的特定类型的事件，并且可以携带入指定事件的一些属性 返回值: Selection d3.event | Attribute 当前的 event。这个属性在事件发生时被设置，并在事件回调结束后被重置。可以通过 d3.event 来访问一些标准的事件对象属性，比如 event.pageX，event.pageY 等，还可以访问一些标准的事件对象方法，比如 event.preventDefault() d3.customEvent | Function 入参: (event, listener[, that[, arguments]]) 描述: 使用特定的 that 上下文和指定的参数 arguments 调用 listener。在调用期间，d3.event 会被设置为指定的 event 对象；在调用结束后，d3.event 会被重置为之前的值 返回值: 取决于 listener 的返回值 d3.mouse | Function 入参: container 描述: 返回当前事件相对于 container 的 x 和 y 坐标(前提是 d3.event 必须是存在的)，container 可以为 HTML 元素或 SVG 元素，比如 G 元素或者 SVG 元素 返回值: [x, y] d3.touch | Function --待验证 入参: (container[, touches], identifier) 描述: 返回当前标识符为 identifier 的触摸事件相对于 container 的 x 和 y 坐标(前提是 d3.event 必须是存在的)，container 可以为 HTML 元素或 SVG 元素，比如 G 元素或者 SVG 元素。当未指定 touches 时，touches 默认为当前事件的 changedTouches 属性。如果以 identifier 作为标识符的事件不包含在 touches 中，则返回 null 返回值: [x, y] 或 null d3.touches | Function --待验证 入参: (container[, touches]) 描述: 返回当前触摸事件相对于 container 的触摸 x 和触摸 y 坐标(前提是 d3.event 必须是存在的)，container 可以为 HTML 元素或 SVG 元素，比如 G 元素或者 SVG 元素，由于触摸可能是多点的，因而返回值为一个二维数组。当未指定 touches 时，touches 默认为当前事件的 touches 属性 返回值: [[x1, y1], [x2, y2], ...] 控制流 selection.each | Function 入参: function (d, i, nodes) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点 描述: 给当前已经选择的每个元素都调用一次 function 函数 返回值: Selection selection.call | Function 入参: (function[, arguments…]) 描述: 调用一次 function 函数。其中 function 函数的第一个参数为当前的 selection，其它参数可选，如下示例 function name(selection, first, last) { selection .attr(\"first-name\", first) .attr(\"last-name\", last); d3.selectAll(\"div\").call(name, \"John\", \"Snow\"); 等价于 name(d3.selectAll(\"div\"), \"John\", \"Snow\"); 返回值: Selection selection.empty | Function 入参: 无 描述: 当当前选择集中没有(非空)元素时，返回 true；否则，返回 false 返回值: Boolean selection.nodes | Function 入参: 无 描述: 返回一个数组，数组中包含当前选择集中的所有非空元素 返回值: Array selection.node | Function 入参: 无 描述: 返回当前选择集中的第一个非空元素，如果选择集为空，则返回 null 返回值: Node selection.size | Function 入参: 无 描述: 返回选择集中的元素个数 返回值: Number 本地变量 d3.local | Function 入参: 无 描述: 声明一个本地变量 返回值: Object(本地变量) local.set | Function 入参: node, value 描述: 设置本地变量的值。设置指定 node 的值为 value，并返回 value。这通常配合 selection.each 使用 selection.each(function(d) { foo.set(this, d.value); }); 如果仅仅要给单一变量设值，可以考虑使用 selection.property(foo, function(d) { return d.value; }); local.get | Function 入参: node 描述: 返回该本地变量在指定 node 上的值，如果该本地变量上没有指定当前 node 的值，则会上溯其祖先元素，直至找到有值的祖先元素；否则，返回 undefined local.remove | Function 入参: node 描述: 删除该本地变量在指定 node 上的值。如果该本地变量上指定了当前 node 的值，返回 true；否则，返回 false。与 local.get 不同，该函数不会上溯到祖先元素 返回值: Boolean local.toString | Function 入参: 无 描述: 返回自动生成的本地变量标识符。该标识符会以变量的形式存储在 DOM 元素中，并且可以通过 element[local] 或 selection.property 来进行获取。这里的 element 为 DOM 元素，local 为本地变量名称 返回值: String 命名空间 d3.namespace | Function 入参: name，有两种形式 包含了冒号(:)，则冒号之前的子串作为命名空间前缀，且该前缀必须在 d3.namespaces 中注册。如果已注册，那么返回一个对象类似于 {space: \"http://www.w3.org/2000/svg\", local: \"text\"}；否则，返回只冒号后的子串 不包含冒号(:)，则直接返回 name 描述: name 中若包含命名空间前缀且该前缀已注册，则返回一个对象；若该前缀未注册，则返回不包含前缀的部分，比如d3.namespace('xxx:name')的返回结果为name，原因是 xxx 不包含在 d3.namespaces 列表中。name 中若不包含命名空间前缀，则直接返回 返回值: Object 或 String d3.namespaces | Attribute 返回注册的命名空间前缀，初始值为 { svg: \"http://www.w3.org/2000/svg\", xhtml: \"http://www.w3.org/1999/xhtml\", xlink: \"http://www.w3.org/1999/xlink\", xml: \"http://www.w3.org/XML/1998/namespace\", xmlns: \"http://www.w3.org/2000/xmlns/\" } "},"d3-path.html":{"url":"d3-path.html","title":"d3-path","keywords":"","body":"d3-path 的主要作用是用来绘制路径，这里的路径涵盖的范围很广泛，比如简单的线段，弧线以及各种形状等等 d3.path | Function 入参: 无 描述: 创建一个 path 返回值: path path.moveTo | Function 入参: (x, y) 描述: 定义路径的起始点。可以想象一下在现实中作画时，下笔的位置就对应于这里的参数 x 和 y 返回值: 无 path.closePath | Function 入参: 无 描述: 闭合当前的路径。从当前点直接连一条直线到起始点 返回值: 无 path.lineTo | Function 入参: (x, y) 描述: 在当前点与指定点(x, y)之间连接一条直线 返回值: 无 path.quadraticCurveTo | Function 入参: (cpx, cpy, x, y) 描述: 在当前点与指定点(x, y)之间绘制一条二次贝塞尔曲线，以 (cpx, cpy) 作为控制点 返回值: 无 path.bezierCurveTo | Function 入参: (cpx1, cpy1, cpx2, cpy2, x, y) 描述: 在当前点与指定点(x, y)之间绘制一条三次贝塞尔曲线，以 (cpx1, cpy1) 作为控制点1，(cpx2, cpy2) 作为控制点2 返回值: 无 path.arcTo | Function 入参: (x1, y1, x2, y2, radius) 描述: 创建一个圆弧。圆弧半径为 radius，两个控制点为 (x1, y1) 和 (x2, y2)，该圆弧的起始位置与当前点和 (x1, y1) 的连线相切，结束位置与 (x1, y1) 和 (x2, y2) 的连线相切。如果当前点与第一个切点不相同，那么会用一条直线连接当前点和第一个切点 返回值: 无 path.arc | Function 入参: (x, y, radius, startAngle, endAngle[, anticlockwise]) 描述: 创建一个圆弧。该圆弧的圆心位于 (x, y)，半径为 radius，开始角度为 startAngle，结束角度为 endAngle(计算单位是弧度)，还有一个可选的参数 anticlockwise 为画弧度的方向，默认为 false，代表顺时针方向；true 代表逆时针方向。如果当前点与圆弧的起始点不相同，那么会用一条直线连接当前点和圆弧的起始点 返回值: 无 path.rect | Function 入参: (x, y, w, h) 描述: 创建一个矩形。该矩形的四个点分别为 (x, y), (x + w, y), (x + w, y + h), (x, y + h) 返回值: 无 path.toString | Function 入参: 无 描述: 返回 path 对象的路径信息字符串，该字符串可以作为 path 元素 d 属性的值 返回值: String "},"d3-drag.html":{"url":"d3-drag.html","title":"d3-drag","keywords":"","body":"d3.drag | Function 入参: 无 描述: 创建一个拖拽操作 返回值: drag，既是一个对象，也是一个函数，往往通过 selection.call 来将其应用到指定的选择集上 drag | Function 入参: selection 描述: 为指定的选择集应用 drag。一般会使用 selection.call 来代替该方法来完成相同的功能，例如 d3.selectAll(\".node\").call(d3.drag().on(\"start\", started)); 上述代码指明了可以在所有 class 为 node 的元素上使用 drag，并且还定义了 drag start 的事件监听器。所有的 drag 事件(start, drag, end)都指定了 .drag 作为事件名称，因而可以通过 .drag 来移除其事件监听器，如下 selection.on(\".drag\", null); 返回值: 无 drag.container | Function drag.filter | Function 入参: [filter]，filter 为 Function 描述: 如果指定了 filter，则设置该 drag 的过滤器；否则，返回当前 drag 的过滤器函数，默认为以下函数 function filter() { return !event.button; } 如果 filter 函数返回 falsey(false 的等价值，比如 null, 0, NaN 等)，则不触发 drag 操作。因此，filter 可以用来过滤 drag 的触发条件。上述的默认 filter 函数过滤了鼠标右键点击的操作，即当点击鼠标右键时，不触发 drag 操作，这是因为点击鼠标右键往往有其它用途，例如弹出菜单栏等 返回值: 如果指定了 filter，返回 drag；否则，返回 Function drag.subject | Function drag.clickDistance | Function drag.on | Function 入参: (typenames[, listener]) 其中 typenames 是一个字符串，多个 typename 中间使用空格分隔。typename 的表现形式主要有两种 事件类型，必须是如下三种类型之一：start - 开始拖拽，比如鼠标按下时 drag - 拖拽中，比如鼠标移动时 end - 拖拽结束，比如鼠标抬起时 事件类型.事件名称，其中事件类型同上，事件名称用来标识该事件，它们中间使用'.'间隔，该形式通常用于给相同类型的事件增加多个不同的监听器 其中 listener 是一个函数: function (d, i) {} d 代表当前数据，i 代表当前索引。this 代表当前元素对应的真实 DOM 节点。如果已注册过特定 typename 的监听器，那么多次注册会将原来的监听器覆盖。如果想要移除特定 typename 的监听器，传入 listener 为 null 即可 描述: 向当前 drag 添加或移除事件监听器。如果没有指定 listener，则返回第一个符合特定 typename 的监听器；否则，给对应的 typename 增加事件监听器 返回值: 如果指定了 listener，返回 drag；否则，返回 Function d3.dragDisable | Function 入参: window 描述: 阻止窗口上的原生拖拽和文本选择事件 返回值: 无 d3.dragEnable | Function 入参: (window[, noclick]) 描述: 启用窗口上的原生拖拽和文本选择事件，取消 d3.dragDisable 的影响。如果 noclick 为 true，那么紧跟(0ms)在 mouseup 事件后面的点击事件无效 返回值: 无 drag 事件 当 drag 监听器被调用时，d3.event 被设置为当前的 drag 事件，该 event 对象包括以下的属性或方法 target - 相关的 drag 行为，比如 filter, container, clickDistance 等 type - 本次 drag 的类型，有三种情况：start, drag 或 end subject - 由 drag.subject 定义 x - subject 的新 x 坐标 y - subject 的新 y 坐标 dx - 相对上个拖拽事件的 x 偏移 dy - 相对上个拖拽事件的 y 偏移 identifier - 字符串\"mouse\"或触摸的标识符数字(touch identifier) active - 当前活跃的拖拽事件数量 sourceEvent - 底层输入事件，比如 mousemove 或 touchmove "},"d3-force.html":{"url":"d3-force.html","title":"d3-force","keywords":"","body":"力导向图基于 Velocity Verlet 实现了物理粒子之间的作用力的仿真。在可视化领域中，仿真经常被用于实现网络结构和层次结构，也可以使用仿真进行碰撞检测。使用该模块时，首先为指定的一组节点创建一个仿真，仿真可以监视力的相互作用过程中的一些状态，然后指定力学模型，力学模型有很多种，比如碰撞作用力、连接作用力等 Simulation d3.forceSimulation | Function 入参: [nodes]，是一个对象数组。nodes 为可选参数，若没有指定，则默认为空数组 描述: 为指定的节点数组创建一个仿真，由于还未指定力学模型，因而该仿真没有作用力。得到的仿真会自动开始，同时触发 tick 事件，事件的触发次数由 ⌈log(alphaMin) / log(1 - alphaDecay)⌉ 计算得出，默认情况下为 300 次 返回值: simulation simulation.restart | Function 入参: 无 描述: 重启仿真内部的计时器(tick) 返回值: 无 simulation.stop | Function 入参: 无 描述: 停止仿真内部的计时器，如果仿真已经停止，则什么都不做 返回值: 无 simulation.tick | Function 入参: 无 描述: 通过 (alphaTarget - alpha) × alphaDecay 来调整仿真当前的 alpha 值(根据公式可以推导出默认情况下第 n 次 tick 时 alpha 的值为 (1 - alphaDecay) ^ n)，然后将这个新 alpha 值传给当前的力学模型来调整布局。每个节点的速度是通过当前 velocity(速度) * velocityDecay(速度衰减)来计算的，最后通过节点当前位置和速度计算出节点的下一个位置 返回值: 无 注: 该方法不会触发 tick 事件。每次仿真的 tick 事件的触发次数由 ⌈log(alphaMin) / log(1 - alphaDecay)⌉ 计算得出，默认参数情况下为300次 simulation.nodes | Function --待补充 入参: [nodes] 描述: 如果指定了 nodes 数组，则根据传入的 nodes 数组初始化仿真节点的初始化位置和速度；如果没有指定 nodes 数组，则根据传入 d3.forceSimulation的 nodes 数组进行初始化。若都没有传入 nodes 数组，则默认为空数组。经过该函数后，会对节点数据进行一个数据改造，每个节点会添加以下属性： index - 节点的索引 x - 节点当前的 x 位置 y - 节点当前的 y 位置 vx - 节点当前的 x 速度 vy - 节点当前的 y 速度 在仿真的过程中，x，y，vx 和 vy 可能随时都在变化。如果 vx 或 vy 为 NaN，那么速度会变为(0, 0)；如果 x 或 y 为 NaN，那么位置会根据 phyllotaxis arrangement 进行初始化 若要将节点固定到指定位置，需要设置一下两个参数: fx - 节点的固定 x 位置 fy - 节点的固定 y 位置 在每次 tick 事件结束后，节点会回到 (fx, fy) 位置，同时节点的 vx 和 vy 都被重置为 0。如果要移除节点的 fx 和 fy 属性，将其赋值为 null 即可 返回值: 无 simulation.alpha | Function 入参: [alpha] 描述: 设置或获取当前仿真的 alpha 值，区间为[0, 1]， 默认为 1 返回值: 如果指定了 alpha，则返回 simulation；否则返回 alpha 注：alpha 是动画的冷却系数，运动过程中会不断减小，直到小于 alphaMin，仿真停止 simulation.alphaMin | Function 入参: [min] 描述: 设置或获取最小的 alpha 值，区间为[0, 1]，默认为 0.001 返回值: 如果指定了 min，则返回 simulation；否则返回 min simulation.alphaDecay | Function 入参: [decay] 描述: 设置或获取衰减系数。默认为0.0228，是由公式 1 - pow(0.001, 1 / 300) 得到的，其中 0.001 是默认的 alphaMin，1 是默认的 alpha，300 是默认的 tick 次数。从这个公式可以看出，衰减系数用来决定从当前 alpha 值到 alphaTarget 值的过渡快慢。衰减系数越大，仿真的过程越短，当然效果会越差。衰减系数越小，则仿真过程越长，最终的效果也就越好。衰减系数为 0 时，仿真会永远运行，alpha 值不变 返回值: 如果指定了 decay，则返回 simulation；否则返回 decay simulation.alphaTarget | Function 入参: [target] 描述: 设置或获取 alpha 的目标值，区间为[0, 1]， 默认为 0 返回值: 如果指定了 target，则返回 simulation；否则返回 target simulation.velocityDecay | Function 入参: [decay] 描述: 设置或获取速度衰减系数，相当于摩擦力。区间为[0, 1], 默认为 0.4。在每次 tick 之后，节点的速度都会等于当前速度乘以1 - velocityDecay，和 alpha 衰减类似，速度衰减越慢最终的效果越好，但是如果速度衰减过慢，可能会导致震荡 返回值: 如果指定了 decay，则返回 simulation；否则返回 decay simulation.force | Function 入参: (name[, force]) 描述: 设置或获取力的作用。默认情况下，仿真中的节点是没有力的作用的，需要通过这个方法为仿真系统设置力的作用。力有很多种，需要根据实际情况指定，比如在对图布局进行仿真时，可以设置如下几种力: var simulation = d3.forceSimulation(nodes) .force(\"charge\", d3.forceManyBody()) //节点间的作用力 .force(\"link\", d3.forceLink(links)) //连线作用力 .force(\"center\", d3.forceCenter()); //重力，布局有一个参考位置，不会跑偏 返回值: 如果指定了 force，则返回 simulation；否则返回 force simulation.find | Function 入参: (x, y[, radius]) 描述: 返回距离(x, y)最接近的节点。当指定搜索半径 radius 时，则在指定的半径区域内寻找，若没有找到节点，则返回undefined；若没有指定搜索半径，则默认搜索半径为无穷大 返回值: 返回一个节点对象，对象结构与调用 *simulation*.nodes() 得到的对象结构一样 simulation.on | Function 入参: (typenames, [listener]) 其中 typenames 是一个字符串，多个 typename 中间使用空格分隔。typename 的表现形式主要有两种 事件类型，必须是如下三种类型之一：tick - 每次 tick 时调用 end - 仿真结束时调用，即当 alpha 事件类型.事件名称，其中事件类型同上，事件名称用来标识该事件，它们中间使用'.'间隔，该形式通常用于给相同类型的事件增加多个不同的监听器 描述: 向当前仿真添加或移除事件监听器。如果没有指定 listener，则返回第一个符合特定 typename 的监听器；否则，给对应的 typename 增加事件监听器 返回值: 如果指定了 listener，返回 simulation；否则，返回 Function 注: tick 事件不会由 simulation.tick() 触发，只能通过 d3.forceSimulation或simulation.restart 触发 Force 在 d3 中提供了向心力、连接力等作用力可以供用户自行调用。当然，d3 也容许用户自定义作用力来满足定制化的需求，比如想要所有的节点都朝向⟨0,0⟩运动，则可以定义如下: function force(alpha) { for (var i = 0, n = nodes.length, node, k = alpha * 0.1; i force | Function --待补充 force.initialize | Function --待补充 Centering 向心力可以使得节点布局围绕某个中心(x, y)，使得所有节点保持在视中心的位置 d3.forceCenter | Function 入参: [x[, y]] 描述: 根据指定的(x, y)坐标创建一个向心力。如果没有指定 x 和 y，则默认以(0, 0)坐标创建向心力 返回值: center center.x | Function 入参: [x] 描述: 设置或获取向心力的 x 坐标，默认为 0 返回值: 如果指定了 x，则返回 center；否则，返回向心力的 x 坐标 center.y | Function 入参: [y] 描述: 设置或获取向心力的 y 坐标，默认为 0 返回值: 如果指定了 y，则返回 center；否则，返回向心力的 y 坐标 Collision 碰撞力将所有的节点看做一个圆而不是点，圆与圆之间不会相互重叠。假设有两个节点 a 和 b，则它们的最短距离是 radius(a) + radius(b) d3.forceCollide | Function 入参: [radius] 描述: 根据指定的半径创建一个碰撞力。如果没有指定半径，则默认为 1 返回值: collide collide.radius | Function 入参: [radius]，有两种形式 数值 function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取节点的碰撞半径。如果指定了 radius，则为每个节点设置其碰撞半径；否则，返回当前的碰撞半径函数，默认为以下函数 function radius() { return 1; } 返回值: 如果指定了 radius，则返回 collide；否则，返回碰撞半径函数 collide.strength | Function 入参: [strength] 描述: 设置或获取碰撞力的强度，区间为[0, 1]，默认为 0.7 返回值: 如果指定了 strength，则返回 collide；否则，返回碰撞力的强度值 注: 对于每个节点来说，下一个 tick 的节点位置都是可以确定的(通过(x + vx,y + vy))，那么这些节点能否重叠也是可以确定的，因而引入碰撞力的强度来改变节点的速度，以使得它们不会相互重叠，并且最终到达一个稳定的状态 collide.iterations | Function 入参: [iterations] 描述: 设置或获取迭代次数，默认为 1 返回值: 如果指定了 iterations，则返回 collide；否则，返回碰撞力的迭代次数 注: 迭代次数越多最终的布局效果越好，但是计算复杂度更高；迭代次数越低，则计算复杂度越小，最终的效果越差 Links 连接力根据节点与节点之间的连接距离来决定节点的布局，力的强度与节点之间的距离成正比 d3.forceLink | Function 入参: [links] 描述: 在给定的 links 上创建连接力，如果没有指定 links，则默认为空数组 返回值: link link.links | Function 入参: [links] 描述: 设置或获取连接力的 links 数组。每个 link 都是包含如下属性的对象: source - link 的源节点 target - link 的目标节点 index - 索引，无需用户手动设置 为方便起见，link 的源节点和目标节点可以由一个数字或者字符串指定而不是一个节点对象，可以参照 link.id 来决定用什么来表示源节点和目标节点。当进行 force.initialize(nodes)时，这里的源节点和目标节点会被替换成相应的节点对象 返回值: 如果指定了 links，则返回 link；否则，返回 links 数组 link.id | Function 入参: [id]，id 为 Function，形式为 function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取节点的 id 访问器(id 访问器用来标识 link 中源节点和目标节点的查找方式)。如果指定了 id，则为节点设置 id 访问器；否则，返回当前的 id 访问器函数，默认为以下函数 function id(d) { return d.index; //默认的 id 访问器为节点的索引 } 当连接力初始化时，会为每个节点调用一次 id 访问器函数 返回值: 如果指定了 id，则返回 link；否则，返回 id 访问器函数 link.distance | Function 入参: [distance]，有两种形式 数值 function (link, index, links) {}，其中 link 为当前连接，index 为索引，links 为连接数组 描述: 设置或获取距离访问器。如果指定了 distance，则为连接设置距离访问器；否则，返回当前的距离访问器，默认为以下函数 function distance() { return 30; } 距离访问器会被每个 link 所调用，因而可以为不同的 link 设置不同的距离 返回值: 如果指定了 distance，则返回 link；否则，返回距离访问器 link.strength | Function 入参: [strength]，有两种形式 数值 function (link, index, links) {}，其中 link 为当前连接，index 为索引，links 为连接数组 描述: 设置或获取强度访问器。如果指定了 strength，则为连接设置强度访问器；否则，返回当前的强度访问器，默认为以下函数 function strength(link) { return 1 / Math.min(count(link.source), count(link.target)); } 其中 count(node) 函数计算了 node 节点的度。强度访问器会被每个 link 所调用，因而可以为不同的 link 设置不同的强度 返回值: 如果指定了 strength，则返回 link；否则，返回强度访问器 link.iterations | Function 入参: [iterations] 描述: 设置或获取迭代次数，默认为 1 返回值: 如果指定了 iterations，则返回 link；否则，返回连接力的迭代次数 注: 迭代次数越多最终的布局效果越好，但是计算复杂度更高；迭代次数越低，则计算复杂度越小，最终的效果越差 Many-Body Many-Body 作用力应用在所有节点的相互作用之中，与连接力只影响源节点与目标节点两个节点不同，该作用力的影响是全局的：每个节点都对所有的其它节点有影响，即使它们不连通。可以用 Many-Body 来模仿重力和电荷力，当强度(strength)为正时，模拟重力；当强度为负时，模拟电荷力 d3.forceManyBody | Function 入参: 无 描述: 创建一个 manyBody 作用力 返回值: manyBody manyBody.strength | Function 入参: [strength]，有两种形式 数值，可以为正，也可以为负 function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取力的强度访问器，如果指定了 strength，则设置力的强度访问器；否则，返回当前的强度访问器，默认为以下函数 function strength() { return -30; } 当强度为正时，节点之间会相互吸引，类似于重力；当强度为负时，节点之间会相互排斥，类似于电荷力 返回值: 如果指定了 strength，则返回 manyBody；否则，返回力的强度访问器 manyBody.theta | Function 入参: [theta] 描述: 设置或获取 theta 参数，该参数默认为 0.9 返回值: 如果指定了 theta，则返回 manyBody；否则，返回 theta 参数 manyBody.distanceMin | Function 入参: [distance] 描述: 设置或获取节点间的最小距离，该参数默认为 1 返回值: 如果指定了 distance，则返回 manyBody；否则，返回最小距离 manyBody.distanceMax | Function 入参: [distance] 描述: 设置或获取节点间的最大距离，该参数默认为无穷大 返回值: 如果指定了 distance，则返回 manyBody；否则，返回最大距离 Positioning 位置力以特定的强度推动节点沿着给定的维度(x 方向或 y 方向)向着目标位置移动。力的强度与目标位置与当前位置的一维距离成正比 d3.forceX | Function 入参: [x] 描述: 在 x 维度上给定的 x 位置上创建位置力，如果没有指定 x，则默认为 0 返回值: x x.strength | Function 入参: [strength]，有两种形式 数值，范围为 [0, 1] function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取位置力的强度访问器，如果指定了 strength，则设置位置力的强度访问器；否则，返回当前的强度访问器，默认为以下函数 function strength() { return 0.1; } strength 决定了节点在 x 方向上的速度增量：(x - targerNode.x) × strength，这个值越大，节点的位置会越快地向目标位置过渡。强度访问器会被每个 node 所调用 返回值: 如果指定了 strength，则返回 x；否则，返回位置力的强度访问器 x.x | Function 入参: [x]，有两种形式 数值 function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取位置力的 x 坐标访问器。如果指定了 x，则设置位置力的 x 坐标访问器；否则，返回当前的 x 坐标访问器，默认为以下函数 function x() { return 0; } 强度访问器会被每个 node 所调用 返回值: 如果指定了 x，则返回 x；否则，返回位置力的 x 坐标访问器 d3.forceY | Function 入参: [y] 描述: 在 y 维度上给定的 y 位置上创建位置力，如果没有指定 y，则默认为 0 返回值: y y.strength | Function 入参: [strength]，有两种形式 数值，范围为 [0, 1] function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取位置力的强度访问器，如果指定了 strength，则设置位置力的强度访问器；否则，返回当前的强度访问器，默认为以下函数 function strength() { return 0.1; } strength 决定了节点在 y 方向上的速度增量：(y - targerNode.y) × strength，这个值越大，节点的位置会越快地向目标位置过渡。强度访问器会被每个 node 所调用 返回值: 如果指定了 strength，则返回 y；否则，返回位置力的强度访问器 y.y | Function 入参: [y]，有两种形式 数值 function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取位置力的 y 坐标访问器。如果指定了 y，则设置位置力的 y 坐标访问器；否则，返回当前的 y 坐标访问器，默认为以下函数 function y() { return 0; } 强度访问器会被每个 node 所调用 返回值: 如果指定了 y，则返回 y；否则，返回位置力的 y 坐标访问器 d3.forceRadial | Function 入参: (radius[, x][, y]) 描述: 以 (x, y) 为圆心，创建了一个指向以 radius 为半径的圆的位置力。如果(x, y)没有指定，则默认为(0, 0) 返回值: radial radial.strength | Function 入参: [strength]，有两种形式 数值，范围为 [0, 1] function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取位置力的强度访问器，如果指定了 strength，则设置位置力的强度访问器；否则，返回当前的强度访问器，默认为以下函数 function strength() { return 0.1; } strength 决定了节点在 x 和 y 方向上的速度增量，这个值越大，节点的位置会越快地向目标位置过渡。强度访问器会被每个 node 所调用 返回值: 如果指定了 strength，则返回 radial；否则，返回位置力的强度访问器 radial.radius | Function 入参: [radius]，有两种形式 数值 function (node, index, nodes) {}，其中 node 为节点，index 为索引，nodes 为节点数组 描述: 设置或获取位置力的半径访问器。如果指定了 radius，则设置位置力的半径访问器；否则，返回当前的半径访问器。半径访问器会被每个 node 所调用 返回值: 如果指定了 radius，则返回 radius；否则，返回位置力的半径访问器 radial.x | Function 入参: [x] 描述: 设置或者获取该位置力的 x 坐标 返回值: 如果指定了 x，则返回 radius；否则，返回 x 坐标 radial.y | Function 入参: [y] 描述: 设置或者获取该位置力的 y 坐标 返回值: 如果指定了 y，则返回 radius；否则，返回 y 坐标 "},"d3-brush.html":{"url":"d3-brush.html","title":"d3-brush","keywords":"","body":"brush 是一个通过鼠标手势来选择一个一维或二维区域的交互操作，比如通过点击并拖拽鼠标就可以选择一个区域。brush 操作通常用于选择离散的元素，比如一个散点图中的某些点。 d3-brush 的实现是基于 SVG 的鼠标或触摸事件。在刷选区域里进行点击和拖拽，可以平移刷选区域；点击并拖拽刷选区域的边缘可以改变区域的大小；在刷选区域外点击并拖拽可以创建一个新的刷选区域；在刷选区域里按下 META(⌘) 键，可以移除当前所在的刷选区域；在刷选时，按下 ALT(⌥) 键可以以刷选起始点为中心进行刷选；当按下 SPACE 键时，仅允许移动变换。 d3.brush | Function 入参: 无 描述: 创建一个二维的 brush 返回值: brush d3.brushX | Function 入参: 无 描述: 创建一个一维的 x 方向的 brush 返回值: brush d3.brushY | Function 入参: 无 描述: 创建一个一维的 y 方向的 brush 返回值: brush brush | Function 入参: group 描述: 为指定的 group 应用 brush，group 必须是一个 selection 或 SVG G 元素。一般会使用 selection.call 来代替该方法来完成相同的功能，例如 svg.append(\"g\") .attr(\"class\", \"brush\") .call(d3.brush().on(\"brush\", brushed)); 上述代码指明了可以在该 G 元素上使用 brush，并且还定义了 brush 的事件监听器。所有的 brush 事件(start, brush, end)都指定了 .brush 作为事件名称，因而可以通过 .brush 来移除其事件监听器，如下 group.on(\".brush\", null); 当我们刷选完毕后，会产生一个刷选区域，d3 内部的实现机制是创建一个 SVG 元素来显示选中的区域，因而可以自定义选中区域的样式，二维的刷选区域的 brush 元素结构如下 其中 overlay 矩形来表示 brush 的可刷选范围(大于或等于当前实际选中的范围)，由 brush.extent 来定义；selection 矩形是当前的刷选区域；handle 矩形用来表示四个边框和四个角落，当鼠标接近区域边缘的时候可以移动，实际上就是鼠标移动到了这些矩形上。 返回值: 无 brush.move | Function 入参: (group, selection)，其中 selection 有两种形式 数值类型的数组 function (d, i) {}，其中 d 代表当前数据，i 代表当前索引，nodes 代表当前已经被选择的元素集。this 代表当前元素对应的真实 DOM 节点。该函数返回值为一个数值类型的数组 描述: 为指定的 group 设置选中范围，在此之前应确保 group 是可被刷选的。group 必须是一个选择集或是一个 SVG G 元素的过渡(transition)。seletion 的数组维度由 brush 的维度来决定。如果是一维的，那么对于 x-brush 来说，selection 由 [x0, x1] 定义；对于 y-brush 来说，selection 由 [y0, y1] 来定义。如果是二维的，selection 由 [[x0, y0],[x1, y1]] 来定义 返回值: 无 brush.extent | Function 入参: [extent]，有两种形式 [[x0, y0], [x1, y1]]，[x0, y0] 代表左上角坐标，[x1, y1]表示右下角坐标 function (d, i) {}，其中 d 代表当前数据，i 代表当前索引。this 代表当前元素对应的真实 DOM 节点。该函数返回值为一个数值类型的数组 描述: 如果指定了 extent，则定义可刷选的范围；否则，返回当前 brush 的 extent 的存取器，默认为以下函数 function extent() { var svg = this.ownerSVGElement || this; return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]]; } 该存取器实际上为一个函数，执行该函数即可获取到该 brush 的 extent。可以从上述代码看出，默认的 extent 依赖于祖先 SVG 元素的宽高 返回值: 如果指定了 extent，返回 brush；否则，返回 Function brush.filter | Function 入参: [filter]，filter 为 Function 描述: 如果指定了 filter，则设置该 brush 的过滤器；否则，返回当前 brush 的过滤器函数，默认为以下函数 function filter() { return !event.button; } 如果 filter 函数返回 falsey(false 的等价值，比如 null, 0, NaN 等)，则不触发 brush 操作。因此，filter 可以用来过滤 brush 的触发条件。上述的默认 filter 函数过滤了鼠标右键点击的操作，即当点击鼠标右键时，不触发 brush 操作，这是因为点击鼠标右键往往有其它用途，例如弹出菜单栏等 返回值: 如果指定了 filter，返回 brush；否则，返回 Function brush.handleSize | Function 入参: [size]，size 为 Number 描述: 如果指定了 size，则设置该 brush 的 handle(handle 矩形用来表示四个边框和四个角落) 的大小；否则，返回当前 brush 的 handle 的大小，默认为 6 返回值: 如果指定了 size，返回 brush；否则，返回 Number 注: 该方法必须在应用一个 brush 到选择集之前调用，并且在调用之后，对之前的 brush 没有影响 brush.on | Function 入参: (typenames[, listener]) 其中 typenames 是一个字符串，多个 typename 中间使用空格分隔。typename 的表现形式主要有两种 事件类型，必须是如下三种类型之一：start - 开始 brush 操作，比如鼠标按下时 brush - 开始拖拽选择 brush 区域，比如鼠标移动时 end - 拖拽选取结束时，比如鼠标抬起时 事件类型.事件名称，其中事件类型同上，事件名称用来标识该事件，它们中间使用'.'间隔，该形式通常用于给相同类型的事件增加多个不同的监听器 其中 listener 是一个函数: function (d, i) {} d 代表当前数据，i 代表当前索引。this 代表当前元素对应的真实 DOM 节点。如果已注册过特定 typename 的监听器，那么多次注册会将原来的监听器覆盖。如果想要移除特定 typename 的监听器，传入 listener 为 null 即可 描述: 向当前 brush 添加或移除事件监听器。如果没有指定 listener，则返回第一个符合特定 typename 的监听器；否则，给对应的 typename 增加事件监听器 返回值: 如果指定了 listener，返回 brush；否则，返回 Function d3.brushSelection | Function 入参: node，类型为 Node 描述: 返回指定节点的 brush 选择。如果给定的 node 没有定义 brush 操作，则返回 null。此外，对于二维 brush，返回 [[x0, y0], [x1, y1]] 这种形式；对于一维 x-brush，返回 [x0, x1] 这种形式；对于一维 y-brush，返回 [y0, y1] 这种形式 返回值: null 或 数值类型的数组 brush 事件 当 brush 监听器被调用时，d3.event 被设置为当前的 brush 事件，该 event 对象包括以下的属性或方法 target - 相关的 brush 行为，比如 filter, extent, handleSize 等 type - 本次 brush 的类型，有三种情况：start, brush 或 end selection - 本次 brush 的 brushSelection，可以参考 d3.brushSelection sourceEvent - 底层输入事件，比如 mousemove 或 touchmove "},"d3-shape/":{"url":"d3-shape/","title":"d3-shape","keywords":"","body":""},"d3-shape/arc.html":{"url":"d3-shape/arc.html","title":"d3-arc","keywords":"","body":"弧形生成器可以用来生成圆形或者环形。如果结束角度和开始角度之间相差 2π 以上，会生成一个完整的圆形或环形；如果结束角度和开始角度之间相差不到 2π，则会生成一个扇形或扇环。生成的弧形圆心总是处在坐标 (0,0) 的位置，如果要变换位置，需要使用 transform。 d3.arc | Function 入参: 无 描述: 创建一个 arc 生成器 返回值: arc arc | Function 入参: arguments...，比如一个包含半径和角度的参数如下 var arc = d3.arc(); arc({ innerRadius: 0, outerRadius: 100, startAngle: 0, endAngle: Math.PI / 2 }); //运行结果: \"M0,-100A100,100,0,0,1,100,0L0,0Z\" 以上方式与以下方式是等价的 var arc = d3.arc() .innerRadius(0) .outerRadius(100) .startAngle(0) .endAngle(Math.PI / 2); arc(); //运行结果: \"M0,-100A100,100,0,0,1,100,0L0,0Z\" 但是在该方式下，如果 arc 生成器指定了 context，那么运行 arc() 无返回值，这是因为该弧段会被渲染到指定的上下文中，假设渲染到某个指定的 path 上下文， var path = d3.path(); arc.context(path);，此时在渲染时，设置属性 d = path.toString() 即可 描述: 根据给定的参数构建一个弧形 返回值: 无 arc.centroid | Function 入参: arguments...，与 arc 方法的参数一致 描述: 根据给定的参数，计算圆弧的中心点。计算方法为：角度偏移为 (startAngle + endAngle) / 2，距离内部半径距离为 (innerRadius + outerRadius) / 2。如下两图 返回值: Array arc.innerRadius | Function 入参: [radius]，可以为两种形式: Number或Function 描述: 如果指定了 radius(半径)，设置内部半径为 radius，并且返回 arc 生成器。如果没有指定 radius，则返回当前的内部半径存取器，默认为 function innerRadius(d) { return d.innerRadius; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或内部半径存取器)) 注: 如果外部半径比内部半径小，那么会内外半径会互换。负值则视为 0 arc.outerRadius | Function 入参: [radius]，可以为两种形式: Number或Function 描述: 如果指定了 radius(半径)，设置外部半径为 radius，并且返回 arc 生成器。如果没有指定 radius，则返回当前的外部半径存取器，默认为 function outerRadius(d) { return d.outerRadius; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或外部半径存取器)) 注: 如果外部半径比内部半径小，那么会内外半径会互换。负值则视为 0 arc.cornerRadius | Function 入参: [radius]，可以为两种形式: Number或Function 描述: 如果指定了 radius(半径)，设置边角半径为 radius，并且返回 arc 生成器。如果没有指定 radius，则返回当前的边角半径存取器，默认为 function cornerRadius() { return 0; } 如果边角半径大于 0，那么弧形的边角呈现出的弯曲角度是以该半径画圆而产生的。如下两图，左图为扇形拼成的圆形，每个扇形有两个边角；右图为扇环拼成的圆环，每个扇环有四个边角 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或外部半径存取器)) 注: 边角半径 arc.startAngle | Function 入参: [angle]，可以为两种形式: Number或Function 描述: 如果指定了 angle(角度)，设置开始角度为 angle，并且返回 arc 生成器。如果没有指定 angle，则返回当前的开始角度存取器，默认为 function startAngle(d) { return d.startAngle; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或开始角度存取器)) 注: 角度是以弧度制来定义的，0 对应于 12 点钟的方向，顺时针计算。如果 |endAngle - startAngle| ≥ 2π，则会生成一个完整的圆形或圆弧 arc.endAngle | Function 入参: [angle]，可以为两种形式: Number或Function 描述: 如果指定了 angle(角度)，设置结束角度为 angle，并且返回 arc 生成器。如果没有指定 angle，则返回当前的结束角度存取器，默认为 function endAngle(d) { return d.endAngle; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或结束角度存取器)) 注: 角度是以弧度制来定义的，0 对应于 12 点钟的方向，顺时针计算。如果 |endAngle - startAngle| ≥ 2π，则会生成一个完整的圆形或圆弧 arc.padAngle | Function 入参: [angle]，可以为两种形式: Number或Function 描述: 如果指定了 angle(角度)，设置间隔角度(padding angle)为 angle，并且返回 arc 生成器。如果没有指定 angle，则返回当前的间隔角度存取器，默认为 function endAngle(d) { return d && d.padAngle } padAngle 和 padRadius 是配合使用的，padAngle * padRadius 定义了相邻的两个弧形之间的距离，该距离会在弧形的开始位置和结束位置减去。当弧形是一个完整的圆形或圆环时，则忽视该距离 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或间隔角度存取器)) 注: 在计算间隔时，会尽量保持弧段之间的平行。当需要设置弧段间隔时，推荐的最小内部半径为 outerRadius * padAngle / sin(θ)，θ 是最小弧段的角度跨度 arc.padRadius | Function 入参: [radius]，可以为两种形式: Number或Function 描述: 如果指定了 radius(半径)，设置间隔半径为 radius，并且返回 arc 生成器。如果没有指定 radius，则返回当前的间隔半径存取器，默认为 null。但是在计算中，如果未指定 padRadius 而只指定了 padAngle 时，padRadius 的值默认为 sqrt(innerRadius innerRadius + outerRadius outerRadius) 返回值: Function(但是根据有无传参，返回的函数意义是不同的(arc 生成器或外部半径存取器)) 注: 如果外部半径比内部半径小，那么会内外半径会互换。负值则视为 0 arc.context | Function 入参: [context]，context 必须是 path 描述: 如果指定了 context，设置该 arc 的上下文为 context，并且返回 arc 生成器。如果没有指定 context，则返回当前的上下文，默认为 null。 返回值: 如果指定 context，返回 Function；否则，返回 Object "},"d3-shape/pie.html":{"url":"d3-shape/pie.html","title":"d3-pie","keywords":"","body":"pie 生成器并不直接生成图形，而是计算出一组能够代表圆形或环形的数据，这些数据可以传入 arc 生成器 d3.pie | Function 入参: 无 描述: 创建一个 pie 生成器 返回值: pie pie | Function --arguments 待验证 入参: (data[, arguments…])，其中 data 为数组，arguments 的作用暂时未知 描述: 根据给定的数组，生成一组带有角度信息的对象数组，与给定数组的元素个数一致。在返回的对象数组中，每个对象都包含如下的属性 data - 对应于给定数组中的每个元素 value - 当前弧段对应的数值 index - 索引 startAngle - 当前弧段的开始角度 endAngle - 当前弧段的结束角度 padAngle - 当前弧段的间隔角度 示例如下，将一个数值数组传给 pie 生成器 var data = [1, 1, 2, 3, 5, 8, 13, 21]; var arcs = d3.pie()(data); 最终生成的数组中每个对象都包含上述属性 [ {\"data\": 1, \"value\": 1, \"index\": 6, \"startAngle\": 6.050474740247008, \"endAngle\": 6.166830023713296, \"padAngle\": 0}, {\"data\": 1, \"value\": 1, \"index\": 7, \"startAngle\": 6.166830023713296, \"endAngle\": 6.283185307179584, \"padAngle\": 0}, {\"data\": 2, \"value\": 2, \"index\": 5, \"startAngle\": 5.817764173314431, \"endAngle\": 6.050474740247008, \"padAngle\": 0}, {\"data\": 3, \"value\": 3, \"index\": 4, \"startAngle\": 5.468698322915565, \"endAngle\": 5.817764173314431, \"padAngle\": 0}, {\"data\": 5, \"value\": 5, \"index\": 3, \"startAngle\": 4.886921905584122, \"endAngle\": 5.468698322915565, \"padAngle\": 0}, {\"data\": 8, \"value\": 8, \"index\": 2, \"startAngle\": 3.956079637853813, \"endAngle\": 4.886921905584122, \"padAngle\": 0}, {\"data\": 13, \"value\": 13, \"index\": 1, \"startAngle\": 2.443460952792061, \"endAngle\": 3.956079637853813, \"padAngle\": 0}, {\"data\": 21, \"value\": 21, \"index\": 0, \"startAngle\": 0.000000000000000, \"endAngle\": 2.443460952792061, \"padAngle\": 0} ] 返回值: 无 注: 在上述的例子中，生成的对象数组顺序与传入的数组顺序是完全一致的。但是排序方法是降序的，即先绘制最后一条数据，value 值为 21 的数据会在角度 0 的地方(12 点钟方向)开始绘制 pie.value | Function 入参: [value]，有两种形式 Number function (d, i, data) {}，其中 d 代表当前的数组元素，i 代表当前索引，data 代表当前的数组。 描述: 设置或获取值访问器。如果指定了 value，则设置当前弧段的值访问器为 value，并且返回 pie 生成器。如果没有指定 value，则返回当前的值访问器，默认为 function value(d) { return d; } 当 pie 生成器被调用时，传入的数组中的每个元素默认都会调用一次 value 用于设置值访问器。由上面默认的值访问器可以看出，默认情况下，该值访问器假定传入的数组为数值数组，或者是可以通过 valueOf 转化成数值的数组。当我们传入的数组不是纯粹的数值数组时，使用默认的值访问器所生成的各个弧段的 value 值为 NaN，这时候就需要我们手动设置值访问器来达到我们的目的。如下 var data = [ {\"number\": 4, \"name\": \"Locke\"}, {\"number\": 8, \"name\": \"Reyes\"}, {\"number\": 15, \"name\": \"Ford\"}, {\"number\": 16, \"name\": \"Jarrah\"}, {\"number\": 23, \"name\": \"Shephard\"}, {\"number\": 42, \"name\": \"Kwon\"} ]; var arcs = d3.pie() .value(function(d) { return d.number; }) (data); 我们也可以使用如下的方式来设置每个弧段的 value 值 var arcs = d3.pie()(data.map(function(d) { return d.number; })); 但是这种方式会使得各个弧段的 data 值也变成 d.number 而不是我们传入的对象。由此，就可以彰显出*pie*.value的意义了：它允许我们通过传入对象来携带更多的信息，比如设置颜色或文本标签等 返回值: Function(但是根据有无传参，返回的函数意义是不同的(pie 生成器或值访问器)) pie.sort | Function 入参: [compare]，形式为 function(a, b) {}，返回值为数字。其中 a 和 b 的数据结构与 *pie* 方法传入的 data 数组的每个元素的数据结构一致。如果 a 要在 b 前面，则该函数要返回一个小于 0 的数字；如果 a 要在 b 后面，则该函数要返回一个大于 0 的数字；如果该函数返回 0，则无所谓 a 和 b 的顺序。比如，根据数据的名称属性进行排序 pie.sort(function(a, b) { return a.name.localeCompare(b.name); }); 描述: 设置或获取数据比较器。如果指定了 compare，则设置数据的比较器为 compare，并且返回 pie 生成器；如果没有指定 compare，则返回当前的数据比较器，默认为 null。 返回值: Function(但是根据有无传参，返回的函数意义是不同的(pie 生成器或数据比较器)) 注: 排序并不会影响生成的弧段数组的顺序，生成的数组顺序仍然与传入的 data 数组的顺序保持一致。排序仅仅影响每个弧段的索引(index)，开始角度(startAngle)和结束角度(endAngle) pie.sortValues | Function 入参: [compare]，形式为 function(a, b) {}，返回值为数字。其中 a 和 b 的数据结构与值访问器*pie*.value返回的数据结构一致，而不是数组元素的数据结构。如果 a 要在 b 前面，则该函数要返回一个小于 0 的数字；如果 a 要在 b 后面，则该函数要返回一个大于 0 的数字；如果该函数返回 0，则无所谓 a 和 b 的顺序。例如，根据 value 值进行升序排序 pie.sortValues(function(a, b) { return a - b; }); 描述: 设置或获取值比较器。如果指定了 compare，则设置值比较器为 compare，并且返回 pie 生成器；如果没有指定 compare，则返回当前的值比较器，默认为降序，函数实现为 function compare(a, b) { return b - a; } 如果数据比较器和值比较器都为 null，那么生成的数组顺序及其索引的顺序都与传入的 data 数组顺序保持一致，并且生成的数组的开始角度和结束角度都是从索引为 0 的位置依次叠加的。否则，生成的数组索引顺序优先根据数据比较器进行排序。当给值比较器赋值时，会自动将数据比较器置为 null 返回值: Function(但是根据有无传参，返回的函数意义是不同的(pie 生成器或数据比较器)) 注: 排序并不会影响生成的弧段数组的顺序，生成的数组顺序仍然与传入的 data 数组的顺序保持一致。排序仅仅影响每个弧段的索引(index)，开始角度(startAngle)和结束角度(endAngle) pie.startAngle | Function 入参: [angle]，可以为两种形式: Number或Function 描述: 设置或获取 pie 的开始角度访问器(这里的开始角度指的是 pie 总体的开始角度，也就是第一个弧形的开始角度)。如果指定了 angle，则设置 pie 的总体的开始角度访问器为 angle，然后返回 pie 生成器；如果没有指定 angle，则返回当前的开始角度访问器，默认为 function startAngle() { return 0; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(pie 生成器或开始角度访问器)) pie.endAngle | Function 入参: [angle]，可以为两种形式: Number或Function 描述: 设置或获取 pie 的结束角度访问器(这里的结束角度指的是 pie 总体的结束角度，也就是最后一个弧形的结束角度)。如果指定了 angle，则设置 pie 的总体的结束角度访问器为 angle，然后返回 pie 生成器；如果没有指定 angle，则返回当前的结束角度访问器，默认为 function endAngle() { return 2 * Math.PI; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(pie 生成器或结束角度访问器)) pie.padAngle | Function 入参: [angle]，可以为两种形式: Number或Function 描述: 设置或获取 pie 的间隔角度访问器。如果指定了 angle，则设置间隔角度访问器为 angle，然后返回 pie 生成器；如果没有指定 angle，则返回当前的间隔角度访问器，默认为 function padAngle() { return 0; } 返回值: Function(但是根据有无传参，返回的函数意义是不同的(pie 生成器或间隔角度访问器)) "}}